----- CartController.php
<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Mage
 * @package     Mage_Checkout
 * @copyright  Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Shopping cart controller
 */
include_once("Mage/Checkout/controllers/CartController.php");
class Overridecontroller_Checkout_CartController extends Mage_Checkout_CartController
{

    /**
     * Add product to shopping cart action
     *
     * @return Mage_Core_Controller_Varien_Action
     * @throws Exception
     */
    public function addAction()
    {
        if (!$this->_validateFormKey()) {
            $this->_goBack();
            return;
        }
        $cart   = $this->_getCart();
        $params = $this->getRequest()->getParams();
        try {
            if (isset($params['qty'])) {
                $filter = new Zend_Filter_LocalizedToNormalized(
                    array('locale' => Mage::app()->getLocale()->getLocaleCode()));
                $params['qty'] = $filter->filter($params['qty']);
            }

            $product = $this->_initProduct();
            $related = $this->getRequest()->getParam('related_product');

            /**
             * Check product availability
             */
            if (!$product) {
                $this->_goBack();
                return;
            }

            $cart->addProduct($product, $params);
            if (!empty($related)) {
                $cart->addProductsByIds(explode(',', $related));
            }
            $cart->save(); $cquote = $cart->getQuote();

	    /**
	     * Check product and assign shipping pricing to the quote collection based on the item  
	     */
	     $lastPid = $cart->getCheckoutSession()->getLastAddedProductId(); $vdata = $product->getUdropshipVendor();  
	     if(!empty($product->getData('shipping_cost_byitself'))){ 
		    $productSinglePrice = $product->getFinalPrice() + $product->getData('shipping_cost_byitself'); 
	     } else { $productSinglePrice = $product->getFinalPrice(); }
	     if(!empty($product->getData('shipping_cost_with_another'))){
	     	$productMultiplePrice = $product->getFinalPrice() + $product->getData('shipping_cost_with_another'); 
	     } else { $productMultiplePrice = $product->getFinalPrice(); } 
		 
	     //check number of products with the same ID 
	     $allQCollItems = $cquote->getItemsCollection(); $samePCnt = 0; 
	     foreach($allQCollItems as $qItem){ $buyRequest = $qItem->getBuyRequest(); 
		  if($buyRequest->getData('shipintime') == NULL){ continue; }
		  if(strstr($buyRequest->getData('shipintime'), '7-10')){ continue; }
		  if($lastPid == $qItem->getProductId()){ $samePCnt = $samePCnt + $buyRequest->getData('qty'); } 
	     }
 
	     if($samePCnt >= 1){
	     //check the quote item and assign the custom price to products
	     foreach($allQCollItems as $qItem){ 
		  $cproduct = Mage::getModel('catalog/product')->load($qItem->getProductId()); 
		  $buyRequest = $qItem->getBuyRequest(); 
		  if(strstr($buyRequest->getData('shipintime'), '7-10')){ continue; }
		  $cpVid = $cproduct->getUdropshipVendor(); 
		  if($cpVid == $vdata){ 
		   if($samePCnt == 1){  
		    $qItem->setBasePrice($productSinglePrice); $qItem->setRowTotal($productSinglePrice);
		    $qItem->setBaseRowTotal($productSinglePrice); $qItem->setBaseCost($productSinglePrice);
		    $qItem->setOriginalCustomPrice($productSinglePrice);
		   } else { 
		    $qItem->setBasePrice($productMultiplePrice); $qItem->setRowTotal($productMultiplePrice);
		    $qItem->setBaseRowTotal($productMultiplePrice); $qItem->setBaseCost($productMultiplePrice);
		    $qItem->setOriginalCustomPrice($productMultiplePrice);
		  }
		 }}} // end if($samePCnt >= 1)*/
	     $cquote->setTotalsCollectedFlag(true); $cart->saveQuote();
             $this->_getSession()->setCartWasUpdated(true);

            /**
             * @todo remove wishlist observer processAddToCart
             */
            Mage::dispatchEvent('checkout_cart_add_product_complete',
                array('product' => $product, 'request' => $this->getRequest(), 'response' => $this->getResponse())
            );

            if (!$this->_getSession()->getNoCartRedirect(true)) {
                if (!$cart->getQuote()->getHasError()) {
                    $message = $this->__('%s was added to your shopping cart.', Mage::helper('core')->escapeHtml($product->getName()));
                    $this->_getSession()->addSuccess($message);
                }
                $this->_goBack();
            }
        } catch (Mage_Core_Exception $e) {
            if ($this->_getSession()->getUseNotice(true)) {
                $this->_getSession()->addNotice(Mage::helper('core')->escapeHtml($e->getMessage()));
            } else {
                $messages = array_unique(explode("\n", $e->getMessage()));
                foreach ($messages as $message) {
                    $this->_getSession()->addError(Mage::helper('core')->escapeHtml($message));
                }
            }

            $url = $this->_getSession()->getRedirectUrl(true);
            if ($url) {
                $this->getResponse()->setRedirect($url);
            } else {
                $this->_redirectReferer(Mage::helper('checkout/cart')->getCartUrl());
            }
        } catch (Exception $e) {
            $this->_getSession()->addException($e, $this->__('Cannot add the item to shopping cart.'));
            Mage::logException($e);
            $this->_goBack();
        }
		
    }

    /**
     * Update shopping cart data action
     */
    public function updatePostAction()
    {
        if (!$this->_validateFormKey()) {
            $this->_redirect('*/*/');
            return;
        }
		
        $updateAction = (string)$this->getRequest()->getParam('update_cart_action');
		
        switch ($updateAction) {
            case 'empty_cart':
                $this->_emptyShoppingCart();
                break;
            case 'update_qty':
                $this->_updateShoppingCart();
                break;
            default:
                $this->_updateShoppingCart();
        }

        $this->_goBack();
		
    }

    /**
     * Update customer's shopping cart
     */
    protected function _updateShoppingCart()
    {
        try {
            $cartData = $this->getRequest()->getParam('cart');
            if (is_array($cartData)) {
                $filter = new Zend_Filter_LocalizedToNormalized(
                    array('locale' => Mage::app()->getLocale()->getLocaleCode())
                );
                foreach ($cartData as $index => $data) {
                    if (isset($data['qty'])) {
                        $cartData[$index]['qty'] = $filter->filter(trim($data['qty']));
                    }
                }
                $cart = $this->_getCart(); 
                if (! $cart->getCustomerSession()->getCustomer()->getId() && $cart->getQuote()->getCustomerId()) {
                    $cart->getQuote()->setCustomerId(null);
                }
                $cartData = $cart->suggestItemsQty($cartData); $cart->updateItems($cartData)->save(); 
								 							
		//get item list that have been modified 
		$cquote = $cart->getQuote(); $allQCollItems = $cquote->getItemsCollection(); 
		$modPList = array(); $prodCntList = array();
		foreach($allQCollItems as $qItem){ $buyRequest = $qItem->getBuyRequest();
		  if($buyRequest->getData('shipintime') == NULL){ continue; } 
		  if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; } 
		  $value = Mage::getModel('catalog/product')->load($qItem->getProductId())->getUdropshipVendor();
		  $value .= ',';  $value .= $qItem->getProductId();  $value .= ','; 
		  $value .= $qItem->getBuyRequest()->getData('qty'); $modPList[$qItem->getId()] = $value;   
		} 
		if(!empty($modPList)){
		//get the count for express products
		foreach($modPList as $qItemid => $value){ $values = explode(',',$value); 
		 if( array_key_exists($values[1],$prodCntList)){ 
		   $cnt = $prodCntList[$values[1]]; $cnt+=$values[2]; $prodCntList[$values[1]] = $cnt;
		 } else { $prodCntList[$values[1]] = $values[2]; }
		} //var_dump($modPList); var_dump($prodCntList);  exit; 
		//set the price according to the number of products
		foreach($allQCollItems as $qItem){ 
		 if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; }
		 $cproduct = Mage::getModel('catalog/product')->load($qItem->getProductId()); 
		 if(!empty($cproduct->getData('shipping_cost_byitself'))){ 
		   $productSinglePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_byitself'); 
	     	 } else { $productSinglePrice = $cproduct->getFinalPrice(); }
	     	 if(!empty($cproduct->getData('shipping_cost_with_another'))){
	     	   $productMultiplePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_with_another'); 
	     	 } else { $productMultiplePrice = $cproduct->getFinalPrice(); } 
		 if($prodCntList[$qItem->getProductId()] == 1){ 
		   $qItem->setBasePrice($productSinglePrice); $qItem->setRowTotal($productSinglePrice);
		   $qItem->setBaseRowTotal($productSinglePrice); $qItem->setBaseCost($productSinglePrice);
		   $qItem->setOriginalCustomPrice($productSinglePrice);  
		 }  
		 if($prodCntList[$qItem->getProductId()] > 1){ 
		   $qItem->setBasePrice($productMultiplePrice); $qItem->setRowTotal($productMultiplePrice);
	    	   $qItem->setBaseRowTotal($productMultiplePrice); $qItem->setBaseCost($productMultiplePrice);
	    	   $qItem->setOriginalCustomPrice($productMultiplePrice);  
		 }
		}} // end if(!empty($modPList))
		$cquote->setTotalsCollectedFlag(true); $cart->saveQuote();	
            }
            $this->_getSession()->setCartWasUpdated(true);
        } catch (Mage_Core_Exception $e) {
            $this->_getSession()->addError(Mage::helper('core')->escapeHtml($e->getMessage()));
        } catch (Exception $e) {
            $this->_getSession()->addException($e, $this->__('Cannot update shopping cart.'));
            Mage::logException($e);
        }
    }

    /**
     * Delete shoping cart item action
     */
    public function deleteAction()
    { 
	    if ($this->_validateFormKey()) {
            $id = (int)$this->getRequest()->getParam('id'); 
            if ($id) {
                try {
                    $this->_getCart()->removeItem($id)->save();
                } catch (Exception $e) {
                    $this->_getSession()->addError($this->__('Cannot remove the item.'));
                    Mage::logException($e);
                }
            }
        } else {  $this->_getSession()->addError($this->__('Cannot remove the item.')); } 
		
	 $this->_getCart()->saveQuote(); $this->_getSession()->setCartWasUpdated(true);
	//get item list that have been modified 
	$cquote = $this->_getCart()->getQuote(); $allQCollItems = $cquote->getItemsCollection(); 
	$modPList = array(); $prodCntList = array();
	foreach($allQCollItems as $qItem){ $buyRequest = $qItem->getBuyRequest();
	  if($buyRequest->getData('shipintime') == NULL){ continue; } 
	  if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; } 
	  $value = Mage::getModel('catalog/product')->load($qItem->getProductId())->getUdropshipVendor();
	  $value .= ',';  $value .= $qItem->getProductId();  $value .= ','; 
	  $value .= $qItem->getBuyRequest()->getData('qty'); $modPList[$qItem->getId()] = $value;   
	} 
	if(!empty($modPList)){
	//get the count for express products
	foreach($modPList as $qItemid => $value){ if($qItemid == $id){ continue; }
	 $values = explode(',',$value); 
	 if( array_key_exists($values[1],$prodCntList)){ 
	   $cnt = $prodCntList[$values[1]]; $cnt+=$values[2]; $prodCntList[$values[1]] = $cnt;
	 } else { $prodCntList[$values[1]] = $values[2]; }
	} //var_dump($modPList); var_dump($prodCntList); exit; 
	//set the price according to the number of products
	foreach($allQCollItems as $qItem){ 
	 if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; }
	 $cproduct = Mage::getModel('catalog/product')->load($qItem->getProductId()); 
	 if(!empty($cproduct->getData('shipping_cost_byitself'))){ 
	   $productSinglePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_byitself'); 
	 } else { $productSinglePrice = $cproduct->getFinalPrice(); }
	 if(!empty($cproduct->getData('shipping_cost_with_another'))){
	   $productMultiplePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_with_another'); 
	 } else { $productMultiplePrice = $cproduct->getFinalPrice(); } 
	 if($prodCntList[$qItem->getProductId()] == 1){ 
	   $qItem->setBasePrice($productSinglePrice); $qItem->setRowTotal($productSinglePrice);
	   $qItem->setBaseRowTotal($productSinglePrice); $qItem->setBaseCost($productSinglePrice);
	   $qItem->setOriginalCustomPrice($productSinglePrice);  
	 }  
	 if($prodCntList[$qItem->getProductId()] > 1){ 
	   $qItem->setBasePrice($productMultiplePrice); $qItem->setRowTotal($productMultiplePrice);
	   $qItem->setBaseRowTotal($productMultiplePrice); $qItem->setBaseCost($productMultiplePrice);
	   $qItem->setOriginalCustomPrice($productMultiplePrice);  
	 }
	}} // end if(!empty($modPList))
	$cquote->setTotalsCollectedFlag(true); $this->_getCart()->saveQuote();	
	$this->_getSession()->setCartWasUpdated(true);

        $this->_redirectReferer(Mage::getUrl('*/*'));
    }

}


---------------------

-- Cart Controller

<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Mage
 * @package     Mage_Checkout
 * @copyright  Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Shopping cart controller
 */
include_once("Mage/Checkout/controllers/CartController.php");
class Binga_Overridecontroller_Checkout_CartController extends Mage_Checkout_CartController
{

    /**
     * Add product to shopping cart action
     *
     * @return Mage_Core_Controller_Varien_Action
     * @throws Exception
     */
    public function addAction()
    {
        if (!$this->_validateFormKey()) {
            $this->_goBack();
            return;
        }
        $cart   = $this->_getCart();
        $params = $this->getRequest()->getParams();
        try {
            if (isset($params['qty'])) {
                $filter = new Zend_Filter_LocalizedToNormalized(
                    array('locale' => Mage::app()->getLocale()->getLocaleCode()));
                $params['qty'] = $filter->filter($params['qty']);
            }

            $product = $this->_initProduct();
            $related = $this->getRequest()->getParam('related_product');

            /**
             * Check product availability
             */
            if (!$product) {
                $this->_goBack();
                return;
            }

            $cart->addProduct($product, $params);
            if (!empty($related)) {
                $cart->addProductsByIds(explode(',', $related));
            }
            $cart->save(); $cquote = $cart->getQuote();

	    /**
	     * Check product and assign shipping pricing to the quote collection based on the item  
	     */
	     $lastPid = $cart->getCheckoutSession()->getLastAddedProductId(); $vdata = $product->getUdropshipVendor();  
	     if(!empty($product->getData('shipping_cost_byitself'))){ 
		    $productSinglePrice = $product->getFinalPrice() + $product->getData('shipping_cost_byitself'); 
	     } else { $productSinglePrice = $product->getFinalPrice(); }
	     if(!empty($product->getData('shipping_cost_with_another'))){
	     	$productMultiplePrice = $product->getFinalPrice() + $product->getData('shipping_cost_with_another'); 
	     } else { $productMultiplePrice = $product->getFinalPrice(); } 
		 
	     //check number of products with the same ID 
	     $allQCollItems = $cquote->getItemsCollection(); $samePCnt = 0; 
	     foreach($allQCollItems as $qItem){ $buyRequest = $qItem->getBuyRequest(); 
		  if($buyRequest->getData('shipintime') == NULL){ continue; }
		  if(strstr($buyRequest->getData('shipintime'), '7-10')){ continue; }
		  if($lastPid == $qItem->getProductId()){ $samePCnt = $samePCnt + $buyRequest->getData('qty'); } 
	     }
 
	     if($samePCnt >= 1){
	     //check the quote item and assign the custom price to products
	     foreach($allQCollItems as $qItem){ 
		  $cproduct = Mage::getModel('catalog/product')->load($qItem->getProductId()); 
		  $buyRequest = $qItem->getBuyRequest(); 
		  if(strstr($buyRequest->getData('shipintime'), '7-10')){ continue; }
		  $cpVid = $cproduct->getUdropshipVendor(); 
		  if($cpVid == $vdata){ 
		   if($samePCnt == 1){  
		    $qItem->setBasePrice($productSinglePrice); $qItem->setRowTotal($productSinglePrice);
		    $qItem->setBaseRowTotal($productSinglePrice); $qItem->setBaseCost($productSinglePrice);
		    $qItem->setOriginalCustomPrice($productSinglePrice);
		   } else { 
		    $qItem->setBasePrice($productMultiplePrice); $qItem->setRowTotal($productMultiplePrice);
		    $qItem->setBaseRowTotal($productMultiplePrice); $qItem->setBaseCost($productMultiplePrice);
		    $qItem->setOriginalCustomPrice($productMultiplePrice);
		  }
		 }}} // end if($samePCnt >= 1)*/
	     $cquote->setTotalsCollectedFlag(true); $cart->saveQuote();
             $this->_getSession()->setCartWasUpdated(true);

            /**
             * @todo remove wishlist observer processAddToCart
             */
            Mage::dispatchEvent('checkout_cart_add_product_complete',
                array('product' => $product, 'request' => $this->getRequest(), 'response' => $this->getResponse())
            );

            if (!$this->_getSession()->getNoCartRedirect(true)) {
                if (!$cart->getQuote()->getHasError()) {
                    $message = $this->__('%s was added to your shopping cart.', Mage::helper('core')->escapeHtml($product->getName()));
                    $this->_getSession()->addSuccess($message);
                }
                $this->_goBack();
            }
        } catch (Mage_Core_Exception $e) {
            if ($this->_getSession()->getUseNotice(true)) {
                $this->_getSession()->addNotice(Mage::helper('core')->escapeHtml($e->getMessage()));
            } else {
                $messages = array_unique(explode("\n", $e->getMessage()));
                foreach ($messages as $message) {
                    $this->_getSession()->addError(Mage::helper('core')->escapeHtml($message));
                }
            }

            $url = $this->_getSession()->getRedirectUrl(true);
            if ($url) {
                $this->getResponse()->setRedirect($url);
            } else {
                $this->_redirectReferer(Mage::helper('checkout/cart')->getCartUrl());
            }
        } catch (Exception $e) {
            $this->_getSession()->addException($e, $this->__('Cannot add the item to shopping cart.'));
            Mage::logException($e);
            $this->_goBack();
        }
		
    }

    /**
     * Update shopping cart data action
     */
    public function updatePostAction()
    {
        if (!$this->_validateFormKey()) {
            $this->_redirect('*/*/');
            return;
        }
		
        $updateAction = (string)$this->getRequest()->getParam('update_cart_action');
		
        switch ($updateAction) {
            case 'empty_cart':
                $this->_emptyShoppingCart();
                break;
            case 'update_qty':
                $this->_updateShoppingCart();
                break;
            default:
                $this->_updateShoppingCart();
        }

        $this->_goBack();
		
    }

    /**
     * Update customer's shopping cart
     */
    protected function _updateShoppingCart()
    {
        try {
            $cartData = $this->getRequest()->getParam('cart');
            if (is_array($cartData)) {
                $filter = new Zend_Filter_LocalizedToNormalized(
                    array('locale' => Mage::app()->getLocale()->getLocaleCode())
                );
                foreach ($cartData as $index => $data) {
                    if (isset($data['qty'])) {
                        $cartData[$index]['qty'] = $filter->filter(trim($data['qty']));
                    }
                }
                $cart = $this->_getCart(); 
                if (! $cart->getCustomerSession()->getCustomer()->getId() && $cart->getQuote()->getCustomerId()) {
                    $cart->getQuote()->setCustomerId(null);
                }
                $cartData = $cart->suggestItemsQty($cartData); $cart->updateItems($cartData)->save(); 
								 							
		//get item list that have been modified 
		$cquote = $cart->getQuote(); $allQCollItems = $cquote->getItemsCollection(); 
		$modPList = array(); $prodCntList = array();
		foreach($allQCollItems as $qItem){ $buyRequest = $qItem->getBuyRequest();
		  if($buyRequest->getData('shipintime') == NULL){ continue; } 
		  if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; } 
		  $value = Mage::getModel('catalog/product')->load($qItem->getProductId())->getUdropshipVendor();
		  $value .= ',';  $value .= $qItem->getProductId();  $value .= ','; 
		  $value .= $qItem->getBuyRequest()->getData('qty'); $modPList[$qItem->getId()] = $value;   
		} 
		if(!empty($modPList)){
		//get the count for express products
		foreach($modPList as $qItemid => $value){ $values = explode(',',$value); 
		 if( array_key_exists($values[1],$prodCntList)){ 
		   $cnt = $prodCntList[$values[1]]; $cnt+=$values[2]; $prodCntList[$values[1]] = $cnt;
		 } else { $prodCntList[$values[1]] = $values[2]; }
		} //var_dump($modPList); var_dump($prodCntList);  exit; 
		//set the price according to the number of products
		foreach($allQCollItems as $qItem){ 
		 if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; }
		 $cproduct = Mage::getModel('catalog/product')->load($qItem->getProductId()); 
		 if(!empty($cproduct->getData('shipping_cost_byitself'))){ 
		   $productSinglePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_byitself'); 
	     	 } else { $productSinglePrice = $cproduct->getFinalPrice(); }
	     	 if(!empty($cproduct->getData('shipping_cost_with_another'))){
	     	   $productMultiplePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_with_another'); 
	     	 } else { $productMultiplePrice = $cproduct->getFinalPrice(); } 
		 if($prodCntList[$qItem->getProductId()] == 1){ 
		   $qItem->setBasePrice($productSinglePrice); $qItem->setRowTotal($productSinglePrice);
		   $qItem->setBaseRowTotal($productSinglePrice); $qItem->setBaseCost($productSinglePrice);
		   $qItem->setOriginalCustomPrice($productSinglePrice);  
		 }  
		 if($prodCntList[$qItem->getProductId()] > 1){ 
		   $qItem->setBasePrice($productMultiplePrice); $qItem->setRowTotal($productMultiplePrice);
	    	   $qItem->setBaseRowTotal($productMultiplePrice); $qItem->setBaseCost($productMultiplePrice);
	    	   $qItem->setOriginalCustomPrice($productMultiplePrice);  
		 }
		}} // end if(!empty($modPList))
		$cquote->setTotalsCollectedFlag(true); $cart->saveQuote();	
            }
            $this->_getSession()->setCartWasUpdated(true);
        } catch (Mage_Core_Exception $e) {
            $this->_getSession()->addError(Mage::helper('core')->escapeHtml($e->getMessage()));
        } catch (Exception $e) {
            $this->_getSession()->addException($e, $this->__('Cannot update shopping cart.'));
            Mage::logException($e);
        }
    }

    /**
     * Delete shoping cart item action
     */
    public function deleteAction()
    { 
	    if ($this->_validateFormKey()) {
            $id = (int)$this->getRequest()->getParam('id'); 
            if ($id) {
                try {
                    $this->_getCart()->removeItem($id)->save();
                } catch (Exception $e) {
                    $this->_getSession()->addError($this->__('Cannot remove the item.'));
                    Mage::logException($e);
                }
            }
        } else {  $this->_getSession()->addError($this->__('Cannot remove the item.')); } 
		
	 $this->_getCart()->saveQuote(); $this->_getSession()->setCartWasUpdated(true);
	//get item list that have been modified 
	$cquote = $this->_getCart()->getQuote(); $allQCollItems = $cquote->getItemsCollection(); 
	$modPList = array(); $prodCntList = array();
	foreach($allQCollItems as $qItem){ $buyRequest = $qItem->getBuyRequest();
	  if($buyRequest->getData('shipintime') == NULL){ continue; } 
	  if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; } 
	  $value = Mage::getModel('catalog/product')->load($qItem->getProductId())->getUdropshipVendor();
	  $value .= ',';  $value .= $qItem->getProductId();  $value .= ','; 
	  $value .= $qItem->getBuyRequest()->getData('qty'); $modPList[$qItem->getId()] = $value;   
	} 
	if(!empty($modPList)){
	//get the count for express products
	foreach($modPList as $qItemid => $value){ if($qItemid == $id){ continue; }
	 $values = explode(',',$value); 
	 if( array_key_exists($values[1],$prodCntList)){ 
	   $cnt = $prodCntList[$values[1]]; $cnt+=$values[2]; $prodCntList[$values[1]] = $cnt;
	 } else { $prodCntList[$values[1]] = $values[2]; }
	} //var_dump($modPList); var_dump($prodCntList); exit; 
	//set the price according to the number of products
	foreach($allQCollItems as $qItem){ 
	 if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; }
	 $cproduct = Mage::getModel('catalog/product')->load($qItem->getProductId()); 
	 if(!empty($cproduct->getData('shipping_cost_byitself'))){ 
	   $productSinglePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_byitself'); 
	 } else { $productSinglePrice = $cproduct->getFinalPrice(); }
	 if(!empty($cproduct->getData('shipping_cost_with_another'))){
	   $productMultiplePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_with_another'); 
	 } else { $productMultiplePrice = $cproduct->getFinalPrice(); } 
	 if($prodCntList[$qItem->getProductId()] == 1){ 
	   $qItem->setBasePrice($productSinglePrice); $qItem->setRowTotal($productSinglePrice);
	   $qItem->setBaseRowTotal($productSinglePrice); $qItem->setBaseCost($productSinglePrice);
	   $qItem->setOriginalCustomPrice($productSinglePrice);  
	 }  
	 if($prodCntList[$qItem->getProductId()] > 1){ 
	   $qItem->setBasePrice($productMultiplePrice); $qItem->setRowTotal($productMultiplePrice);
	   $qItem->setBaseRowTotal($productMultiplePrice); $qItem->setBaseCost($productMultiplePrice);
	   $qItem->setOriginalCustomPrice($productMultiplePrice);  
	 }
	}} // end if(!empty($modPList))
	$cquote->setTotalsCollectedFlag(true); $this->_getCart()->saveQuote();	
	$this->_getSession()->setCartWasUpdated(true);

        $this->_redirectReferer(Mage::getUrl('*/*'));
    }

    /**
     * Update product configuration for a cart item
     */
    public function updateItemOptionsAction()
    {
        $cart   = $this->_getCart();
        $id = (int) $this->getRequest()->getParam('id');
        $params = $this->getRequest()->getParams();

        if (!isset($params['options'])) {
            $params['options'] = array();
        }
        try {
            if (isset($params['qty'])) {
                $filter = new Zend_Filter_LocalizedToNormalized(
                    array('locale' => Mage::app()->getLocale()->getLocaleCode())
                );
                $params['qty'] = $filter->filter($params['qty']);
            }

            $quoteItem = $cart->getQuote()->getItemById($id);
            if (!$quoteItem) {
                Mage::throwException($this->__('Quote item is not found.'));
            }

            $item = $cart->updateItem($id, new Varien_Object($params));
            if (is_string($item)) {
                Mage::throwException($item);
            }
            if ($item->getHasError()) {
                Mage::throwException($item->getMessage());
            }

            $related = $this->getRequest()->getParam('related_product');
            if (!empty($related)) {
                $cart->addProductsByIds(explode(',', $related));
            }

            $cart->save(); 
			
		//get item list that have been modified 
		$cquote = $cart->getQuote(); $allQCollItems = $cquote->getItemsCollection(); 
		$modPList = array(); $prodCntList = array();
		foreach($allQCollItems as $qItem){ $buyRequest = $qItem->getBuyRequest();
		  if($buyRequest->getData('shipintime') == NULL){ continue; } 
		  if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; } 
		  $value = Mage::getModel('catalog/product')->load($qItem->getProductId())->getUdropshipVendor();
		  $value .= ',';  $value .= $qItem->getProductId();  $value .= ','; 
		  $value .= $qItem->getBuyRequest()->getData('qty'); $modPList[$qItem->getId()] = $value;   
		} 
		if(!empty($modPList)){
		//get the count for express products
		foreach($modPList as $qItemid => $value){ //if($qItemid != $id){ continue; }
		 $values = explode(',',$value); 
		 if( array_key_exists($values[1],$prodCntList)){ 
		   $cnt = $prodCntList[$values[1]]; $cnt+=$values[2]; $prodCntList[$values[1]] = $cnt;
		 } else { $prodCntList[$values[1]] = $values[2]; }
		} var_dump($modPList); var_dump($prodCntList);  exit; 
		//set the price according to the number of products
		foreach($allQCollItems as $qItem){ 
		 if(strstr($qItem->getBuyRequest()->getData('shipintime'), '7-10')){ continue; }
		 $cproduct = Mage::getModel('catalog/product')->load($qItem->getProductId()); 
		 if(!empty($cproduct->getData('shipping_cost_byitself'))){ 
		   $productSinglePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_byitself'); 
	     	 } else { $productSinglePrice = $cproduct->getFinalPrice(); }
	     	 if(!empty($cproduct->getData('shipping_cost_with_another'))){
	     	   $productMultiplePrice = $cproduct->getFinalPrice() + $cproduct->getData('shipping_cost_with_another'); 
	     	 } else { $productMultiplePrice = $cproduct->getFinalPrice(); } 
		 if($prodCntList[$qItem->getProductId()] == 1){ 
		   $qItem->setBasePrice($productSinglePrice); $qItem->setRowTotal($productSinglePrice);
		   $qItem->setBaseRowTotal($productSinglePrice); $qItem->setBaseCost($productSinglePrice);
		   $qItem->setOriginalCustomPrice($productSinglePrice);  
		 }  
		 if($prodCntList[$qItem->getProductId()] > 1){ 
		   $qItem->setBasePrice($productMultiplePrice); $qItem->setRowTotal($productMultiplePrice);
	    	   $qItem->setBaseRowTotal($productMultiplePrice); $qItem->setBaseCost($productMultiplePrice);
	    	   $qItem->setOriginalCustomPrice($productMultiplePrice);  
		 }
		}} // end if(!empty($modPList))
		$cquote->setTotalsCollectedFlag(true); $cart->saveQuote();

            $this->_getSession()->setCartWasUpdated(true);

            Mage::dispatchEvent('checkout_cart_update_item_complete',
                array('item' => $item, 'request' => $this->getRequest(), 'response' => $this->getResponse())
            );
            if (!$this->_getSession()->getNoCartRedirect(true)) {
                if (!$cart->getQuote()->getHasError()) {
                    $message = $this->__('%s was updated in your shopping cart.', Mage::helper('core')->escapeHtml($item->getProduct()->getName()));
                    $this->_getSession()->addSuccess($message);
                }
                $this->_goBack();
            }
        } catch (Mage_Core_Exception $e) {
            if ($this->_getSession()->getUseNotice(true)) {
                $this->_getSession()->addNotice($e->getMessage());
            } else {
                $messages = array_unique(explode("\n", $e->getMessage()));
                foreach ($messages as $message) {
                    $this->_getSession()->addError($message);
                }
            }

            $url = $this->_getSession()->getRedirectUrl(true);
            if ($url) {
                $this->getResponse()->setRedirect($url);
            } else {
                $this->_redirectReferer(Mage::helper('checkout/cart')->getCartUrl());
            }
        } catch (Exception $e) {
            $this->_getSession()->addException($e, $this->__('Cannot update the item.'));
            Mage::logException($e);
            $this->_goBack();
        }
        $this->_redirect('*/*');
    }



}



